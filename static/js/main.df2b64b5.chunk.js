(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{29:function(e,a,t){e.exports=t.p+"static/media/logo.7d2e3c0f.svg"},31:function(e,a,t){e.exports=t(55)},36:function(e,a,t){},37:function(e,a,t){},42:function(e,a,t){},55:function(e,a,t){"use strict";t.r(a);var n=t(0),r=t.n(n),i=t(23),l=t.n(i),o=(t(36),t(4)),c=t(3);t(37);function m(){return r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 192 192",className:"LinkIcon",style:{margin:"0 .3rem",verticalAlign:"bottom"}},r.a.createElement("g",{strokeMiterlimit:"10",textAnchor:"none"},r.a.createElement("path",{d:"M130.246 29.608c-8.42.404-16.517 4.079-22.777 10.338L82.915 64.5c3.857-3.877 18.173-1.212 21.647 2.262L119.423 51.9c3.291-3.291 7.41-5.31 11.63-5.492 2.868-.142 6.927.464 10.5 4.038 3.333 3.332 4.04 7.209 4.04 9.854 0 4.422-2.02 8.824-5.493 12.277l-25.846 26.008c-6.502 6.502-16.396 7.027-22.13 1.292-3.272-3.271-8.663-3.291-11.955 0-3.291 3.291-3.291 8.662 0 11.954 5.896 5.896 13.65 8.884 21.646 8.884 8.643 0 17.467-3.533 24.231-10.338l26.008-25.846c6.603-6.583 10.338-15.387 10.338-24.231 0-8.218-3.11-16.033-8.884-21.808-6.18-6.179-14.478-9.288-23.262-8.884zM90.185 71.285c-8.643 0-17.608 3.553-24.393 10.338L39.946 107.47c-6.603 6.583-10.338 15.387-10.338 24.231 0 8.218 3.11 16.033 8.884 21.808 6.18 6.179 14.478 9.288 23.262 8.884 8.42-.404 16.517-4.079 22.777-10.338l24.554-24.554c-3.877 3.877-18.173 1.212-21.647-2.262L72.577 140.1c-3.291 3.291-7.41 5.29-11.63 5.492-2.868.142-6.927-.464-10.5-4.038-3.333-3.332-4.04-7.229-4.04-9.854 0-4.422 2.02-8.824 5.493-12.277l25.846-26.008c6.502-6.502 16.396-7.006 22.13-1.292 3.292 3.291 8.684 3.291 11.955 0 3.291-3.291 3.291-8.662 0-11.954-5.896-5.896-13.67-8.884-21.646-8.884z",fill:"currentColor",stroke:"none"})))}function s(){return r.a.createElement("section",{id:"motivation"},r.a.createElement("h2",null,r.a.createElement("a",{href:"#motivation"},"Motivation",r.a.createElement(m,null))),r.a.createElement("p",null,"Literal JSX aims to serve a similar purpose as JSON did: by subsetting the syntax of JSX to its well-founded, unambiguously structured, easily parseable, and non-Turing-complete core, a"," ",r.a.createElement("em",null,"technically flexible and visually intuitive content format")," is obtained. On the one hand, Literal JSX is easily parseable (due to its single-pass unambiguous grammar), making it a good candidate for at-runtime compilation. On the other, it is an easily authored and well-known syntax, mainly due to the immense popularity of React, the web UI library that invented and popularized JSX."),r.a.createElement("p",null,'Especially in the intersection of the two rising trends in web development that are: (1) lightweight markup format content authoring (that is, using Markdown or some other simple markup format to serve the content of your site, documentation, or something else); and (2) component-based UI design, which is emerging as a best-practice engineering technique for complex interfaces; there is a strong need for a simple standard for describing nominal and data-rich content structures, as opposed to the various case-specific "grammar-hacks" that are now commonly used for this purpose. Literal JSX aims to satisfy that need. The idea of interspersing JSX in markdown is not new, and libraries such as ',r.a.createElement("a",{href:"https://mdxjs.com/"},"MDX")," are currently popularizing this idea. However MDX is a ",r.a.createElement("em",null,"library")," dependent on a full-blown JavaScript parser, thereby making it technically non-trivial and dubious to compile content at runtime (e.g. in the browser). By instead just outlining a narrow and unambiguous subset grammar of JSX, Literal JSX defines a ",r.a.createElement("em",null,"standard")," that is language- and framework-agnostic."),r.a.createElement("p",null,"To summarize: Literal JSX aims to privide a"," ",r.a.createElement("em",null,"straightforward and intuitive standard")," for content-authoring in the component-based era."))}var u=t(7),d=t(1),h=(t(18),t(19),t(39),t(6)),p=t(8),g=t.n(p);function f(e){var a=e.tabs,t=Object(n.useState)(0),i=Object(h.a)(t,2),l=i[0],o=i[1];return r.a.createElement("div",{className:g.a.container},r.a.createElement("ul",{className:g.a.nav},a.map(function(e,a){return r.a.createElement("li",{key:a},r.a.createElement("button",{onClick:function(){return o(a)},className:l===a?g.a.selected:""},e.title))})),r.a.createElement("div",{className:g.a.content},a[l]?a[l].content:null))}d.a.Diagram.INTERNAL_ALIGNMENT="left";var b=[{title:"Element",diagram:d.a.ComplexDiagram("<",d.a.NonTerminal("Name"),d.a.ZeroOrMore(d.a.NonTerminal("Attribute")),d.a.Choice(1,d.a.Sequence("/",">"),d.a.Sequence(">",d.a.ZeroOrMore(d.a.NonTerminal("Child")),"<","/",d.a.NonTerminal("Name*"),">"))),note:r.a.createElement("p",null,"*must match the one on in the opening tag")},{title:"Name",diagram:d.a.ComplexDiagram(d.a.NonTerminal("Identifier"),d.a.Choice(0,d.a.ZeroOrMore(d.a.Sequence(".",d.a.NonTerminal("Identifier"))),d.a.Sequence(":",d.a.NonTerminal("Identifier")))),note:r.a.createElement("p",null,r.a.createElement("em",null,"Identifier")," is any valid variable name in JavaScript")},{title:"Attribute",diagram:d.a.ComplexDiagram(d.a.NonTerminal("Identifier"),d.a.Choice(0,d.a.Skip(),d.a.Sequence(":",d.a.NonTerminal("Identifier"))),d.a.Optional(d.a.Sequence("=",d.a.Choice(0,d.a.NonTerminal("String"),d.a.Sequence("{",d.a.NonTerminal("Value"),"}")))))},{title:"Child",diagram:d.a.ComplexDiagram(d.a.Choice(0,d.a.NonTerminal("plain text"),d.a.NonTerminal("Element"),d.a.Sequence("{",d.a.NonTerminal("Value"),"}")))}].map(function(e){return Object(u.a)({},e,{content:r.a.createElement("div",{className:"new"},r.a.createElement("div",{dangerouslySetInnerHTML:{__html:e.diagram}}),e.note||null)})}),E=d.a.NonTerminal("Element");E.attrs.class+=" new";var v=[{title:"Value",diagram:d.a.ComplexDiagram(d.a.Choice(0,E,d.a.NonTerminal("String"),d.a.NonTerminal("Number"),d.a.NonTerminal("Object"),d.a.NonTerminal("Array"),"true","false","null"))},{title:"Object",diagram:d.a.ComplexDiagram("{",d.a.ZeroOrMore(d.a.Sequence(d.a.NonTerminal("String"),":",d.a.NonTerminal("Value")),","),"}")},{title:"Array",diagram:d.a.ComplexDiagram("[",d.a.ZeroOrMore(d.a.NonTerminal("Value"),","),"]")},{title:"String",diagram:d.a.Diagram('"',d.a.Optional(d.a.OneOrMore(d.a.Choice(0,d.a.NonTerminal("almost any UNICODE character"),d.a.Sequence("\\",d.a.Choice(0,d.a.Sequence('"',d.a.Comment("quotation mark")),d.a.Sequence("\\",d.a.Comment("reverse solidus")),d.a.Sequence("/",d.a.Comment("solidus")),d.a.Sequence("b",d.a.Comment("backspace")),d.a.Sequence("f",d.a.Comment("formfeed")),d.a.Sequence("n",d.a.Comment("newline")),d.a.Sequence("r",d.a.Comment("carriage return")),d.a.Sequence("t",d.a.Comment("horizontal tab")),d.a.Sequence("u",d.a.NonTerminal("4 hexademical digits"))))))),'"')},{title:"Number",diagram:d.a.Diagram(d.a.Sequence(d.a.Choice(0,d.a.Skip(),"-"),d.a.Choice(0,"0",d.a.Sequence(d.a.NonTerminal("digit 1-9"),d.a.OneOrMore(d.a.Skip(),d.a.NonTerminal("digit")))),d.a.Optional(d.a.Sequence(".",d.a.OneOrMore(d.a.NonTerminal("digit")))),d.a.Choice(0,d.a.Skip(),d.a.Sequence(d.a.Choice(0,"e","E"),d.a.Choice(1,"-",d.a.Skip(),"+"),d.a.OneOrMore(d.a.NonTerminal("digit"))))))}].map(function(e){return Object(u.a)({},e,{content:r.a.createElement("div",{dangerouslySetInnerHTML:{__html:e.diagram}})})});function S(){return r.a.createElement("section",{id:"specification"},r.a.createElement("h2",null,r.a.createElement("a",{href:"#specification"},"Specification",r.a.createElement(m,null))),r.a.createElement("p",null,'Literal JSX subsets JSX in the same spirit as JSON subsets JavaScript. This means some "sugary" JSX syntax has been intentionally omitted. For example, JSX elements cannot be assigned unquoted to attributes of other elements, and strings are always double-quoted, just like in JSON. Some other things to note are:'),r.a.createElement("ul",null,r.a.createElement("li",null,'The "root" for the grammer is that ',r.a.createElement("em",{className:"nt"},"Value")," ",'non-terminal. That is to say, Literal JSX "is just JSON", but then with some JSX goodness.'),r.a.createElement("li",null,'There is no "fragment" type (usually written as ',r.a.createElement("code",null,"<>")," ","... ",r.a.createElement("code",null,"</>"),"). The way that fragments are used in React essentially boils down to an array, which ",r.a.createElement("em",null,"is")," expressible in Literal JSX. For example:"," ",r.a.createElement("code",null,"[<a />, <b />, <c />]")),r.a.createElement("li",null,"White-space can be freely inserted between pretty much every token, and does not affect semantics. However, the"," ",r.a.createElement("em",{className:"nt"},"plain text")," non-terminal forms an exception: it greedily eats and preserves white-space left and right.")),r.a.createElement(f,{tabs:b}),r.a.createElement(f,{tabs:v}))}var w=t(24),N=t(12),y=(t(40),t(42),t(13)),O=t(11),T=t.n(O);function x(){var e=Object(o.a)(["font-size: 80%;"]);return x=function(){return e},e}function j(){var e=Object(o.a)(["font-style: italic;"]);return j=function(){return e},e}function k(){var e=Object(o.a)(["\n        color: #ca390c;\n        font-weight: bold;\n        text-align: left;\n      "]);return k=function(){return e},e}function C(){var e=Object(o.a)(["\n        white-space: pre;\n        margin-top: 1.4rem;\n        max-width: 100%;\n        overflow-x: auto;\n        text-align: left;\n      "]);return C=function(){return e},e}window.LJSX=T.a;var J={mode:"text/jsx",theme:"ljsx",lineNumbers:!1,smartIndent:!0,tabSize:2,indentWithTabs:!1},q=Object(u.a)({},y.b,{BASE_BACKGROUND_COLOR:"transparent",TREENODE_PADDING_LEFT:20,TREENODE_FONT_SIZE:"12px"}),L=Object(w.a)("code"),X='<Button.NavLike\n  name="Hello"\n  something={{ "a": 24 }}\n  ok\n>\n \tPlain text is always a <bit:boring />\n  {[25, {}, "hello", <a.b.c> hi! </ a.b.c>]}\n</Button.NavLike>';function I(){var e=L(X),a=Object(h.a)(e,2),t=a[0],i=a[1],l=Object(n.useMemo)(function(){try{return{value:T.a.parseValue(t),ast:T.a.parseAST(t)}}catch(e){return{error:e}}},[t]);return r.a.createElement("section",{id:"implementation"},r.a.createElement("h2",null,r.a.createElement("a",{href:"#implementation"},"Example implementation",r.a.createElement(m,null))),r.a.createElement("p",null,"An example parser implementation is provided in the"," ",r.a.createElement("a",{href:"https://www.npmjs.com/package/@literal-jsx/parser"},r.a.createElement("code",null,"@literal-jsx/parser"))," ","npm package. It can be used as follows:"),r.a.createElement(N.Controlled,{value:'import { parseValue, parseAST } from "literal-jsx";\nconst data = parseValue(\'<Button primary text="Hi" />\');',options:Object(u.a)({},J,{readOnly:"nocursor"}),onBeforeChange:function(){}}),r.a.createElement("p",null,"You can play around with the parser below. It will parse the given literal JSX source code starting with the ",r.a.createElement("em",{className:"nt"},"Value")," ","non-terminal, as per the spec. No factory function is passed, and therefore the content is just transformed to a default content structure detailing the Literal JSX structure."),r.a.createElement(N.Controlled,{className:"editable",value:t,options:J,onBeforeChange:function(e,a,t){i(t)}}),r.a.createElement("div",null,r.a.createElement(f,{tabs:[{title:"Value",content:"value"in l?_(l.value):M(l.error)},{title:"AST",content:"ast"in l?_(l.ast):M(l.error)}]})))}function _(e){return r.a.createElement(D,null,r.a.createElement(y.a,{theme:q,data:e,expandLevel:5}))}function M(e){return r.a.createElement(A,null,r.a.createElement(B,null,"That couldn't be parsed :("),r.a.createElement(V,null,e.toString()))}var D=Object(c.a)("div")(C()),A=Object(c.a)("div")(k()),B=Object(c.a)("p")(j()),V=Object(c.a)("pre")(x()),z=t(29),H=t.n(z);function R(){var e=Object(o.a)(["\n                  margin: 1rem 0 0;\n                "]);return R=function(){return e},e}function F(){var e=Object(o.a)(["\n                  margin: 0;\n                "]);return F=function(){return e},e}function Z(){var e=Object(o.a)(["\n                  height: 6rem;\n                  width: auto;\n                  display: block;\n                "]);return Z=function(){return e},e}var U=function(e){return e}(function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("main",{id:"top"},r.a.createElement("div",{className:"wrap"},r.a.createElement("div",{className:"titlecontainer"},r.a.createElement("a",{href:"#top"},r.a.createElement(W,{alt:"",src:H.a})),r.a.createElement("div",{className:"titleblock"},r.a.createElement(G,null,"Introducing Literal JSX"),r.a.createElement(K,{className:"lead"},r.a.createElement("em",null,"Let JSX embrace its potential as a content authoring markup format for the component-based era!")))),r.a.createElement("p",{className:"lead"},r.a.createElement("strong",null,"Literal JSX")," is a lightweight format for content potentially rich in data and nominal structure. It extends"," ",r.a.createElement("a",{href:"https://json.org"},r.a.createElement("strong",null,"JSON"))," ","by adding the JSX-like ",r.a.createElement("em",null,"Element")," type as a possible value type aside objects, arrays, numbers, strings, booleans, and"," ",r.a.createElement("code",null,"null"),". However, instead of the full JavaScript expression syntax, only JSON data (through possibly nesting more"," ",r.a.createElement("em",null,"Element"),' nodes recursively) are allowed inside of its attributes ("props") and children.'),r.a.createElement(s,null),r.a.createElement(S,null),r.a.createElement(I,null))),r.a.createElement("footer",null,r.a.createElement("div",{className:"wrap"},"An idea proposed by ",r.a.createElement("a",{href:"https://klve.nl/"},"Kelley van Evert"),". Inspired by ",r.a.createElement("a",{href:"https://json.org/"},"JSON"),". Also, this site and the example implementation could not have been made without these lovely libraries: tabatkins'"," ",r.a.createElement("a",{href:"https://github.com/tabatkins/railroad-diagrams"},r.a.createElement("code",null,"railroad-diagrams")),", Hardmath123's"," ",r.a.createElement("a",{href:"https://nearley.js.org/"},r.a.createElement("code",null,"nearley.js")),".")))}),W=Object(c.a)("img")(Z()),G=Object(c.a)("h1")(F()),K=Object(c.a)("p")(R());Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));l.a.render(r.a.createElement(U,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,a,t){e.exports={container:"Tabbed_container__20F7-",nav:"Tabbed_nav__1yge6",selected:"Tabbed_selected__1ofSX",content:"Tabbed_content__3KoXz"}}},[[31,1,2]]]);
//# sourceMappingURL=main.df2b64b5.chunk.js.map